// Top-level build file where you can add configuration options common to all sub-projects/modules.
apply plugin: 'jacoco'

buildscript {
    repositories {
        jcenter {
            url "http://jcenter.bintray.com/"
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.5.0'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        jcenter {
            url "http://jcenter.bintray.com/"
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

def coverageSourceDirs = ['launch/src/main/java', 'card/src/main/java', 'app/src/main/java']
def coverageClassDirectories = [fileTree(dir: 'launch/build/intermediates/classes/debug'),
                                fileTree(dir: 'card/build/intermediates/classes/debug'),
                                fileTree(dir: 'app/build/intermediates/classes/debug')]

task jacocoAllReport(type: JacocoReport, dependsOn: 'testDebugUnitTest') {

    def projects = new ArrayList()
    subprojects.each { prj ->
        projects.add(prj)
    }

    reports {
        xml.enabled = true
        html.enabled = true
    }


    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    /*sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])*/

    additionalSourceDirs = files(coverageSourceDirs)
    sourceDirectories = files(coverageSourceDirs)
    classDirectories = files(coverageClassDirectories)

/*
    sourceDirectories = generateSourceFiles(projects)
    classDirectories = generateClassDirs(projects)
*/

    executionData = files(["${buildDir}/jacoco/testDebugUnitTest.exec",
                           "${buildDir}/outputs/code-coverage/connected/coverage.ec"
    ])
}





/**
 *  List of modules that don't require Jacoco
 */
/*def ignoredByJacoco = [

]*/

/**
 *  Apply additional build steps to sub-projects
 */
/*subprojects { prj ->

    // Apply Jacoco only if the project is not in the ignore list
    //if (!ignoredByJacoco.contains(prj.name))   {

        apply plugin: 'jacoco'

        jacoco {
            version '0.7.2.201409121644'
        }

        task jacocoReport(type: JacocoReport, dependsOn: 'testDebugUnitTest') {
            group = 'Reporting'
            description = 'Generate Jacoco coverage reports after running tests.'

            reports {
                xml.enabled = true
                html.enabled = true
            }

            classDirectories = fileTree(
                    dir: 'build/intermediates/classes/debug',
                    excludes: [
                            '**//*R*.class',
                            '**//*BuildConfig*'
                    ]
            )

            sourceDirectories = files('src/main/java')
            executionData = files('build/jacoco/testDebugUnitTest.exec')

            doFirst {
                files('build/intermediates/classes/debug').getFiles().each { file ->
                    if (file.name.contains('$$')) {
                        file.renameTo(file.path.replace('$$', '$'))
                    }
                }
            }
        }
    //}
}

jacoco {
    toolVersion '0.7.2.201409121644'
}*/

/**
 *  Root task that generates an aggregated Jacoco test coverage report for all sub-projects
 */
/*
task jacocoFullReport(type: JacocoReport, group: 'Coverage reports') {
    group = 'Reporting'
    description = 'Generates an aggregate report from all subprojects'

    // Get list of projects which should be included in the report
    def projects = new ArrayList()
    subprojects.each { prj ->
        //if (!ignoredByJacoco.contains(prj.name)) {
            projects.add(prj)
        //}
    }

    //noinspection GrUnresolvedAccess
    dependsOn(projects.jacocoReport)

    additionalSourceDirs = generateSourceFiles(projects)
    sourceDirectories = generateSourceFiles(projects)
    classDirectories = generateClassDirs(projects)
    executionData = files(projects.jacocoReport.executionData)

    reports {
        html {
            enabled true
            destination 'build/reports/jacoco/full'
        }
        xml {
            enabled true
            destination 'build/reports/jacoco/full/jacocoFullReport.xml'
        }
    }

    doFirst {
        //noinspection GroovyAssignabilityCheck
        executionData = files(executionData.findAll { it.exists() })
    }
}
*/

/**
 *  Generate a FileCollection of all projects source files
 */
/*
FileCollection generateSourceFiles(Collection projects) {
    def dirs = []

    projects.each { prj ->
        dirs.add("${prj.name}/src/main/java")
    }

    return files(dirs)
}

*/
/**
 *  Generate a FileCollection of all projects class files
 *//*

FileCollection generateClassDirs(Collection projects) {
    def tree = fileTree('directory does not exists') // I know it's ugly :)

    projects.each { prj ->
        //noinspection GrReassignedInClosureLocalVar
        tree += fileTree(
                dir: "${prj.name}/build/intermediates/classes/debug",
                excludes: [
                        '**//*
R*.class',
                        '**//*
BuildConfig*'
                ]
        )
    }

    return tree
}
*/


